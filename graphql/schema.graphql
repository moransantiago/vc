type User {
	_id: ID!
	username: String!
    email: String!
	password: String!
	servers: [Server]
	friends: [User]
	friendRequests: [User]
}

type Server {
	_id: ID!
	admin: ID!
	name: String!
	users: [User]
	chats: [Chat]
	channels: [Channel]
}

type Chat {
	_id: ID!
	name: String!
}

type Channel {
	_id: ID!
	name: String!
}

# INPUTS

# => USERS

input UserInput {
	username: String!
    email: String!
	password: String!
}

input UserEditInput {
	username: String
    email: String
	password: String
}

input UserCredentials {
	username: String!
	password: String!
}

# => SERVERS

input ServerInput {
	admin: ID!
	name: String!
	users: [ID]
	chats: [ID]
	channels: [ID]
}

input ServerEditInput {
	admin: ID
	name: String
	users: [ID]
	chats: [ID]
	channels: [ID]
}

# => CHATS

input ChatInput {
	name: String!
	server: ID!
}

input ChatEditInput {
	name: String
}

# => CHANNELS

input ChannelInput {
	name: String!
	server: ID!
}

input ChannelEditInput {
	name: String
}

# QUERIES

type Query {
	"Gets all users"
	getUsers: [User]
	"Gets a user"
	getUser(username: String!): User
	"Gets users based on a search"
	filterUsers(username: String!): [User]
	"Gets the logged user using the jwt payload"
	getMe: User
	"Gets all servers"
	getServers: [Server]
	"Gets a server"
	getServer(id: ID!): Server
	"Searches a server by name"
	searchServer(name: String!): [Server]
}

# MUTATIONS

type Mutation {
	"Creates a user"
	createUser(input: UserInput!): User
	"Edits a user"
	editUser(id: ID!, input: UserEditInput): User
	"Deletes a user"
	deleteUser(id: ID!): ID
	"Creates a server"
	createServer(input: ServerInput!): Server
	"Edits a server"
	editServer(id: ID!, input: ServerEditInput): Server
	"Deletes a server"
	deleteServer(id: ID!): ID
	"Creates a chat"
	createChat(input: ChatInput!): Chat
	"Edits a chat"
	editChat(id: ID!, input: ChatEditInput): Chat
	"Deletes a chat"
	deleteChat(id: ID!): ID
	"Creates a channel"
	createChannel(input: ChannelInput!): Channel
	"Edits a channel"
	editChannel(id: ID!, input: ChannelEditInput): Channel
	"Deletes a channel"
	deleteChannel(id: ID!): ID
	"Adds a user to a server"
	addUserToServer(userId: ID!, serverId: ID!): Server
	"Adds a user id to the friend requests array OR adds a user id to the friend array (if the friend req was already sent)"
	addFriend(userId: ID!): [User] # => Returns both users
	"Removes a friend request from the friend requests array OR removes a user id from the friend array (if the userId was already a friend)"
	removeFriend(userId: ID!): [User] # => Returns both users
	"Returns a token to perform auth"
	logIn(input: UserCredentials!): String
	"Creates a personal user and returns a token to perform auth"
	signUp(input: UserInput!): String
}
