type Server {
	_id: ID!
	admin: User!
	users: [User]
	channels: [Channel]
}

type Channel {
	_id: ID!
	name: String!
}

type User {
	_id: ID!
	username: String!
    email: String!
	password: String!
	servers: [Server]
}

# INPUTS

# => USERS

input UserInput {
	username: String!
    email: String!
	password: String!
}

input UserEditInput {
	username: String
    email: String
	password: String
}

# => SERVERS

input ServerInput {
	admin: User!
	users: [User]
	channels: [Channel]
}

input ServerEditInput {
	admin: User
	users: [User]
	channels: [Channel]
}

# QUERIES

type Query {
	"Gets all users"
	getUsers: [User]
	"Gets a user"
	getUser(id: ID!): User
	"Gets all servers"
	getServers: [Server]
	"Gets a server"
	getServer(id: ID!): Server
}

# MUTATIONS

type Mutation {
	"Creates a user"
	createUser(input: UserInput!): User
	"Edits a user"
	editUser(id: ID!, input: UserEditInput): User
	"Deletes a user"
	deleteUser(id: ID!): ID
	"Creates a server"
	createServer(input: ServerInput!): Server
	"Edits a server"
	editServer(id: ID!, input: ServerEditInput): Server
	"Deletes a server"
	deleteServer(id: ID!): ID
}
